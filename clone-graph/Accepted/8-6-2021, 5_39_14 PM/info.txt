{"id":534210898,"lang":"cpp","time":"8 months, 1 week","timestamp":1628251754,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/534210898/","is_pending":"Not Pending","title":"Clone Graph","memory":"8.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) \n    {\n        if(node == NULL)\n            return NULL;\n        \n        unordered_map<int, Node *> visited;\n        return makeClone(node, visited);\n    }\n    \n    Node* makeClone(Node *node, unordered_map<int, Node *> &visited)\n    {\n        Node *newNode = new Node(node->val);\n        visited[node->val] = newNode;\n        \n        for(auto i : node->neighbors)\n        {\n            if(visited.find(i->val) == visited.end())\n            {\n                Node *next = makeClone(i, visited);\n                newNode->neighbors.push_back(next);\n            }\n            else\n                newNode->neighbors.push_back(visited[i->val]);\n        }\n        return newNode;\n    }\n};","compare_result":"1111111111111111111111","title_slug":"clone-graph"}