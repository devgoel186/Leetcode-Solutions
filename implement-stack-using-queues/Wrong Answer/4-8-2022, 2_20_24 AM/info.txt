{"id":675956639,"lang":"cpp","time":"5 days, 10 hours","timestamp":1649364624,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/675956639/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"N/A","code":"class MyStack {\nprivate:\n    queue<int> q1, q2;\n\npublic:\n    MyStack() {\n        \n    }\n    \n    void push(int x) {\n        while(!q1.empty())\n        {\n            int temp = q1.front();\n            q1.pop();\n            q2.push(temp);\n        }\n        \n        q1.push(x);\n    }\n    \n    int pop() {\n        if(q1.empty())\n            return -1;\n        \n        int x = q1.front();\n        q1.pop();\n        \n        while(!q2.empty())\n        {\n            int temp = q2.front();\n            q2.pop();\n            q1.push(temp);\n        }\n        \n        return x;\n    }\n    \n    int top() {\n        return q1.front();\n    }\n    \n    bool empty() {\n        if(q1.empty() && q2.empty())\n            return true;\n        return false;\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */","compare_result":"1111111111111100","title_slug":"implement-stack-using-queues"}