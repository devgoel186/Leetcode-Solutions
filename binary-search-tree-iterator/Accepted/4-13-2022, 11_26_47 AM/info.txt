{"id":679441935,"lang":"cpp","time":"1 hour, 31 minutes","timestamp":1649829407,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/679441935/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"24.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\nprivate:\n    priority_queue<int, vector<int>, greater<int>> pq;\n    \n    void helper(TreeNode *root)\n    {\n        if(root == NULL)\n            return;\n        \n        helper(root->left);\n        pq.push(root->val);\n        helper(root->right);\n    }\n    \npublic:\n    BSTIterator(TreeNode* root) {\n        helper(root);\n    }\n    \n    int next() {\n        int x = pq.top();\n        pq.pop();\n        return x;\n    }\n    \n    bool hasNext() {\n        return !pq.empty();\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}