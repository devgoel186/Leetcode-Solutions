{"id":542073895,"lang":"cpp","time":"7 months, 3 weeks","timestamp":1629577196,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/542073895/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"9.9 MB","code":"class Solution {\npublic:\n    int helper(vector<vector<int>> &matrix, vector<vector<int>> &dp, int r, int c)\n    {\n        int n = matrix.size();\n        \n        if(c < 0 || c >= n)\n            return INT_MAX;\n        \n        if(r == n - 1)\n            return matrix[r][c];\n        \n        if(dp[r][c] != INT_MAX)\n            return dp[r][c];\n        \n        dp[r][c] = min({helper(matrix, dp, r + 1, c - 1), helper(matrix, dp, r + 1, c), helper(matrix, dp, r + 1, c + 1)}) + matrix[r][c];\n        \n        return dp[r][c];\n    }\n    \n    int minFallingPathSum(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        vector<vector<int>> dp(n, vector<int> (n, INT_MAX));\n        \n        int maxVal = INT_MAX;\n        for(int i = 0; i < n; i++)\n        {\n            maxVal = min(maxVal, helper(matrix, dp, 0, i));\n        }\n\n        return maxVal;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"minimum-falling-path-sum"}