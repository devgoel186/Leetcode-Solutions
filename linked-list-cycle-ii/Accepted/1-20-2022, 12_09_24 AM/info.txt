{"id":623408796,"lang":"cpp","time":"2Â months, 3Â weeks","timestamp":1642617564,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/623408796/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"7.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode *slow = head;\n        ListNode *fast = head;\n        bool cycle = false;\n        \n        while(fast != NULL && fast->next != NULL)\n        {\n            slow = slow->next;\n            fast = fast->next->next;\n            \n            if(slow == fast)\n            {\n                cycle = true;\n                break;\n            }\n        }\n        \n        if(!cycle)\n            return NULL;\n        \n        fast = head;\n        int count = 0;\n        \n        while(fast != slow)\n        {\n            fast = fast->next;\n            slow = slow->next;            \n        }\n        \n        return fast;\n    }\n};","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii"}