{"id":610296953,"lang":"cpp","time":"3 months, 1 week","timestamp":1640940200,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/610296953/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"26 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode *build(vector<int> &preorder, vector<int> &inorder, int &rootIdx, int left, int right)\n    {\n      if (left > right)\n        return NULL;\n\n      int pivot = left;\n      while (inorder[pivot] != preorder[rootIdx])\n        pivot++;\n\n      rootIdx++;\n      TreeNode *newNode = new TreeNode(inorder[pivot]);\n      newNode->left = build(preorder, inorder, rootIdx, left, pivot - 1);\n      newNode->right = build(preorder, inorder, rootIdx, pivot + 1, right);\n      return newNode;\n    }\n    \n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder)    {\n    int rootIdx = 0;\n    return build(preorder, inorder, rootIdx, 0, inorder.size() - 1);    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}