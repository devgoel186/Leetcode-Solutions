{"id":538494392,"lang":"cpp","time":"8Â months","timestamp":1628967260,"status_display":"Accepted","runtime":"128 ms","url":"/submissions/detail/538494392/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"63.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode *root, vector<int> &res)\n    {\n        if(root == NULL)\n            return;\n        \n        inorder(root->left, res);\n        res.push_back(root->val);\n        inorder(root->right, res);\n    }\n    \n    TreeNode *helper(const vector<int> &ans, int l, int r)\n    {\n        if(l > r)\n            return NULL;\n        \n        int mid = (l + r) / 2;        \n        TreeNode *root = new TreeNode(ans[mid]);\n        \n        root->left = helper(ans, l, mid - 1);        \n        root->right = helper(ans, mid + 1, r);\n        \n        return root;\n    }\n    \n    TreeNode* balanceBST(TreeNode* root) \n    {        \n        vector<int> ans;\n        inorder(root, ans);\n        \n        TreeNode *rootNew = helper(ans, 0, ans.size() - 1);\n        return rootNew;\n    }\n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree"}