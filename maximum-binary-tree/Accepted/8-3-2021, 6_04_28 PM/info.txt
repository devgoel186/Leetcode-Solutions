{"id":532634302,"lang":"cpp","time":"8 months, 1 week","timestamp":1627994068,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/532634302/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"42.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructMaximumBinaryTreeHelper(vector<int>& nums, int l, int r) {\n        if(l > r)\n            return NULL;\n        \n        int maxIndex = l, max = INT_MIN;\n        for(int i = l; i <= r; i++)\n        {\n            if(nums[i] > max)\n            {\n                max = nums[i];\n                maxIndex = i;\n            }\n        }\n        \n        TreeNode *root = new TreeNode(max);\n        root->left = constructMaximumBinaryTreeHelper(nums, l, maxIndex - 1);\n        root->right = constructMaximumBinaryTreeHelper(nums, maxIndex + 1, r);\n        return root;\n    }\n    \n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        TreeNode *root = constructMaximumBinaryTreeHelper(nums, 0, nums.size() - 1);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree"}