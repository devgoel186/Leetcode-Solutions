{"id":537311085,"lang":"cpp","time":"8Â months","timestamp":1628764351,"status_display":"Accepted","runtime":"140 ms","url":"/submissions/detail/537311085/","is_pending":"Not Pending","title":"Find the City With the Smallest Number of Neighbors at a Threshold Distance","memory":"12 MB","code":"class Solution {\npublic:\n    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n        vector<vector<int>> dist(n, vector<int> (n, INT_MAX));\n        \n        for(int i = 0; i < edges.size(); i++)\n        {\n            int u = edges[i][0];\n            int v = edges[i][1];\n            int w = edges[i][2];\n            dist[u][v] = w;\n            dist[v][u] = w;\n        }\n        \n        for(int i = 0; i < n; i++)\n        {\n            dist[i][i] = 0;\n        }\n        \n        for(int k = 0; k < n; k++)\n        {\n            for(int i = 0; i < n; i++)\n            {\n                for(int j = 0; j < n; j++)\n                {\n                    if(dist[i][k] != INT_MAX && dist[k][j] !=  INT_MAX)\n                    {\n                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);\n                        dist[j][i] = min(dist[i][j], dist[i][k] + dist[k][j]);\n                    }\n                }\n            }\n        }\n    \n        // vector<vector<int>> adjl(n);\n        // for(int i = 0; i < dist.size(); i++)\n        // {            \n        //     for(int j = 0; j < dist.size(); j++)   \n        //     {\n        //         if(dist[i][j] != 0 && dist[i][j] <= distanceThreshold)\n        //         {\n        //             adjl[i].push_back(j);\n        //         }\n        //     }\n        // }\n        \n        \n        int max = 0, minSize = INT_MAX;\n        \n        // for(int i = 0; i < adjl.size(); i++)\n        // {\n        //     if(adjl[i].size() <= minSize)\n        //     {\n        //         minSize = adjl[i].size();\n        //         if(i > max)\n        //             max = i;\n        //     }\n        // }\n        \n        for(int i = 0; i < n; i++)\n        {\n            int temp = 0;\n            for(int j = 0; j < n; j++)\n            {\n                if(i != j && dist[i][j] <= distanceThreshold)\n                    temp++;\n            }\n            if(temp <= minSize)\n            {\n                minSize = temp;\n                if(i > max)\n                    max = i;\n            }\n        }\n        \n        return max;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance"}