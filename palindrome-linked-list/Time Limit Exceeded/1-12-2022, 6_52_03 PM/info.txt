{"id":618326916,"lang":"cpp","time":"3Â months","timestamp":1641993723,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/618326916/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    string reverse(ListNode *head) \n    {\n        if(head == NULL)\n            return \"\";\n        \n        string s = \"\";\n        char ch = head->val + '0';\n        s = reverse(head->next) + ch;\n        return s;\n    }\n    \n    string forward(ListNode *head)\n    {\n        if(head == NULL)\n            return \"\";\n        \n        string s = \"\";\n        char ch = head->val + '0';\n        s = ch + forward(head->next);\n        return s;\n    }\n    \n    bool isPalindrome(ListNode* head) {\n        return forward(head) == reverse(head);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111110000000","title_slug":"palindrome-linked-list"}