{"id":623353652,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1642612098,"status_display":"Accepted","runtime":"298 ms","url":"/submissions/detail/623353652/","is_pending":"Not Pending","title":"Insertion Sort List","memory":"10.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    void insertionSort(vector<int> &arr)\n    {\n        for(int i = 1; i < arr.size(); i++)\n        {\n            int key = arr[i];\n            int j = i - 1;\n            while(j >= 0 && arr[j] > key)\n            {\n                arr[j + 1] = arr[j];\n                j--;\n            }\n            arr[j + 1] = key;\n        }\n    }\n    \n    ListNode *makeList(vector<int> &order)\n    {\n        if(order.size() == 0)\n            return NULL;\n        \n        ListNode *x = new ListNode();\n        ListNode *temp = x;\n        temp->val = order[0];\n        \n        for(int i = 1; i < order.size(); i++)\n        {\n            temp->next = new ListNode(order[i]);\n            temp = temp->next;\n        }\n        \n        return x;\n    }\n    \n    void traverse(ListNode *head, vector<int> &order)\n    {\n        ListNode *temp = head;\n        while(temp != NULL)\n        {\n            order.push_back(temp->val);\n            temp = temp->next;\n        }\n    }\n    \n    ListNode* insertionSortList(ListNode* head) {\n        vector<int> order;\n        traverse(head, order);\n        insertionSort(order);\n        ListNode *newHead = makeList(order);\n        \n        return newHead;\n    }\n};","compare_result":"1111111111111111111","title_slug":"insertion-sort-list"}