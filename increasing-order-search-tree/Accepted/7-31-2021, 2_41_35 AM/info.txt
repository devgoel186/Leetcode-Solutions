{"id":530797662,"lang":"cpp","time":"8 months, 2 weeks","timestamp":1627679495,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/530797662/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorderBuild(TreeNode *root, vector<int> &inorder)\n    {\n        if(root == NULL)    \n            return;\n        \n        inorderBuild(root->left, inorder);\n        inorder.push_back(root->val);\n        inorderBuild(root->right, inorder);\n    }\n    \n    TreeNode* increasingBST(TreeNode* root) {\n        vector<int> inorder;\n        inorderBuild(root, inorder);\n        \n        TreeNode *head = NULL;\n        TreeNode *temp = NULL;\n        \n        for(auto i : inorder)\n        {\n            if(temp == NULL)\n            {\n                temp = new TreeNode(i);\n                head = temp;\n            }\n            \n            else\n            {\n                temp->right = new TreeNode(i);\n                temp = temp->right;\n            }\n        }\n        \n        return head;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"increasing-order-search-tree"}