{"id":531170635,"lang":"cpp","time":"8 months, 2 weeks","timestamp":1627753529,"status_display":"Accepted","runtime":"360 ms","url":"/submissions/detail/531170635/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"362.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int> inorder, int l, int r)\n    {\n        if(l > r)\n            return NULL;\n        \n        int mid = (l + r) / 2;\n        \n        TreeNode *root = NULL;\n        \n        root = new TreeNode(inorder[mid]);\n        root->left = buildTree(inorder, l, mid - 1);\n        root->right = buildTree(inorder, mid + 1, r);\n        return root;\n    }\n    \n    TreeNode* sortedListToBST(ListNode* head) {\n        ListNode *temp = head;\n        vector<int> inorder;\n        while(temp != NULL)\n        {\n            inorder.push_back(temp->val);\n            temp = temp->next;\n        }\n        \n        TreeNode *root = buildTree(inorder, 0, inorder.size()  -1);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree"}