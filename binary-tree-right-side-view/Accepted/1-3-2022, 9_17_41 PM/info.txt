{"id":612208347,"lang":"cpp","time":"3 months, 1 week","timestamp":1641224861,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/612208347/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"12.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n        if(root == NULL)\n            return {};\n        \n        vector<int> res;\n        queue<TreeNode *> q;\n        q.push(root);\n        \n        while(!q.empty())\n        {\n            int size = q.size();\n            while(size--)\n            {\n                TreeNode* x = q.front();\n                q.pop();\n                \n                if(size == 0)\n                    res.push_back(x->val);\n                \n                if(x->left)\n                    q.push(x->left);\n                \n                if(x->right)\n                    q.push(x->right);\n            }\n        }\n        \n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view"}