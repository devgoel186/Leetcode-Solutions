{"id":538860813,"lang":"cpp","time":"8Â months","timestamp":1629029807,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/538860813/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"24.7 MB","code":"class Solution {\npublic:\n    bool isSafe(vector<vector<int>> &matrix, int r, int c, int m, int n)\n    {\n        if(r < 0 || c < 0 || r >= m || c >= n)\n            return false;\n        return true;\n    }\n    \n    int helper(vector<vector<int>> &matrix, vector<vector<int>> &dp, int m, int n, int r, int c)\n    {\n        if(dp[r][c] != -1)\n            return dp[r][c];\n        \n        vector<pair<int, int>> dir({{-1, 0}, {1, 0}, {0, -1}, {0, 1}});\n        \n        for(int i = 0; i < 4; i++)\n        {\n            int x = r + dir[i].first;\n            int y = c + dir[i].second;\n            \n            if(isSafe(matrix, x, y, m, n) && matrix[r][c] < matrix[x][y])\n            {\n                dp[r][c] = max(dp[r][c], 1 + helper(matrix, dp, m, n, x, y));\n            }\n        }\n        \n        \n        dp[r][c] = max(dp[r][c], 1);\n        \n        return dp[r][c];\n    }\n    \n//     int dfs(vector<vector<int>> m, vector<vector<int>> dp, int i, int j){\n//         if(dp[i][j] != -1) return dp[i][j];\n        \n//         if(i-1 >= 0 && m[i-1][j] > m[i][j]){\n//             dp[i][j] = max(dp[i][j], 1+dfs(m, dp, i-1, j));\n//         }\n//         if(j-1 >= 0 && m[i][j-1] > m[i][j]){\n//             dp[i][j] = max(dp[i][j], 1+dfs(m, dp, i, j-1));\n//         }\n//         if(i+1 < m.size() && m[i+1][j] > m[i][j]){\n//             dp[i][j] = max(dp[i][j], 1+dfs(i+1, j));\n//         }\n//         if(j+1 < m[0].size() && m[i][j+1] > m[i][j]){\n//             dp[i][j] = max(dp[i][j], 1+dfs(i, j+1));\n//         }\n//         dp[i][j] = max(dp[i][j], 1);\n        \n//         return dp[i][j];\n//     }\n    \n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        int m = matrix.size(), n = matrix[0].size();\n        vector<vector<int>> dp(m, vector<int> (n, -1));\n        int longestPath = 0;\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = 0; j < n; j++)\n            {\n                longestPath = max(helper(matrix, dp, m, n, i, j), longestPath);\n            }\n        }\n        \n        return longestPath;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}