{"id":540604038,"lang":"cpp","time":"7 months, 3 weeks","timestamp":1629321074,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/540604038/","is_pending":"Not Pending","title":"Cherry Pickup","memory":"22.6 MB","code":"class Solution {\npublic:\n    /* DP SOLUTION */\n    \n    bool isSafe(vector<vector<int>> &grid, int r1, int c1, int r2, int c2)\n    {\n        int n = grid.size();\n        if(r1 >= n || r2 >= n || c1 >= n || c2 >= n || (grid[r1][c1] == -1) || (grid[r2][c2] == -1))\n            return false;\n        return true;\n    }\n    \n    int dfs(vector<vector<vector<int>>> &dp, vector<vector<int>> &grid, int r1, int c1, int r2)\n    {\n        int c2 = r1 + c1 - r2;\n        int n = grid.size();\n        \n        if(!isSafe(grid, r1, c1, r2, c2))\n            return INT_MIN;\n        \n        if(r1 == n - 1 && c1 == n - 1)\n            return grid[r1][c1];\n        \n        if(dp[r1][c1][r2] != -1)\n            return dp[r1][c1][r2];\n        \n        int cherries = 0;\n        if(r1 == r2 && c1 == c2)\n            cherries += grid[r1][c1];\n        else\n            cherries += grid[r1][c1] + grid[r2][c2];\n        \n        int a = dfs(dp, grid, r1 + 1, c1, r2 + 1);\n        int b = dfs(dp, grid, r1, c1 + 1, r2 + 1);\n        int c = dfs(dp, grid, r1 + 1, c1, r2);\n        int d = dfs(dp, grid, r1, c1 + 1, r2);\n        \n        cherries += max({a, b, c, d});\n        \n        return dp[r1][c1][r2] = cherries;\n    }\n    \n    int cherryPickup(vector<vector<int>>& grid) {\n        int n = grid.size();\n        \n        vector<vector<vector<int>>> dp(n, vector<vector<int>> (n, vector<int> (n, -1)));\n        \n        return max(dfs(dp, grid, 0, 0, 0), 0);\n    }\n    \n    /* BACKTRACKING SOLUTION\n    \n    int maxCherries = INT_MIN;\n    \n    bool isSafe(vector<vector<int>> &grid, int r, int c)\n    {\n        int n = grid.size();\n        if(r < 0 || r >= n || c < 0 || c >= n || (grid[r][c] == -1))\n            return false;\n        return true;\n    }\n    \n    void dfsBack(vector<vector<int>> &grid, int r, int c, int count)\n    {\n        int n = grid.size();\n        \n        if(!isSafe(grid, r, c))\n            return;\n        \n        int cherries = grid[r][c];\n        grid[r][c] = 0;        \n        \n        if(r == 0 && c == 0)\n        {\n            maxCherries = max(count + cherries, maxCherries);\n            return;\n        }        \n        \n        dfsBack(grid, r - 1, c, count + cherries);\n        dfsBack(grid, r, c - 1, count + cherries);\n        \n        grid[r][c] = cherries;\n    }\n    \n    void dfsFront(vector<vector<int>> &grid, int r, int c, int count)\n    {\n        int n = grid.size();\n        \n        if(!isSafe(grid, r, c))\n            return;\n        \n        int cherries = grid[r][c];\n        grid[r][c] = 0;\n        \n        if(r == n - 1 && c == n - 1)\n            dfsBack(grid, r, c, count + cherries);\n        \n        dfsFront(grid, r + 1, c, count + cherries);\n        dfsFront(grid, r, c + 1, count + cherries);\n        \n        grid[r][c] = cherries;\n    }\n    \n    int cherryPickup(vector<vector<int>>& grid) {\n        dfsFront(grid, 0, 0, 0);\n        if(maxCherries == INT_MIN)\n            return 0;\n        return maxCherries;\n    }\n    \n    */\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"cherry-pickup"}