{"id":540596662,"lang":"cpp","time":"7 months, 3 weeks","timestamp":1629319799,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/540596662/","is_pending":"Not Pending","title":"Cherry Pickup","memory":"N/A","code":"class Solution {\npublic:\n    int maxCherries = INT_MIN;\n    \n    bool isSafe(vector<vector<int>> &grid, int r, int c)\n    {\n        int n = grid.size();\n        if(r < 0 || r >= n || c < 0 || c >= n || (grid[r][c] == -1))\n            return false;\n        return true;\n    }\n    \n    void dfsBack(vector<vector<int>> &grid, int r, int c, int count)\n    {\n        int n = grid.size();\n        \n        if(!isSafe(grid, r, c))\n            return;\n        \n        int cherries = grid[r][c];\n        grid[r][c] = 0;        \n        \n        if(r == 0 && c == 0)\n        {\n            maxCherries = max(count + cherries, maxCherries);\n            return;\n        }        \n        \n        dfsBack(grid, r - 1, c, count + cherries);\n        dfsBack(grid, r, c - 1, count + cherries);\n        \n        grid[r][c] = cherries;\n    }\n    \n    void dfsFront(vector<vector<int>> &grid, int r, int c, int count)\n    {\n        int n = grid.size();\n        \n        if(!isSafe(grid, r, c))\n            return;\n        \n        int cherries = grid[r][c];\n        grid[r][c] = 0;\n        \n        if(r == n - 1 && c == n - 1)\n            dfsBack(grid, r, c, count + cherries);\n        \n        dfsFront(grid, r + 1, c, count + cherries);\n        dfsFront(grid, r, c + 1, count + cherries);\n        \n        grid[r][c] = cherries;\n    }\n    \n    int cherryPickup(vector<vector<int>>& grid) {\n        dfsFront(grid, 0, 0, 0);\n        return maxCherries;\n    }\n};","compare_result":"10111110111111000000000000000000000000000000000000000000000","title_slug":"cherry-pickup"}