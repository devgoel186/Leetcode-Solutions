{"id":538356623,"lang":"cpp","time":"8Â months","timestamp":1628944713,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/538356623/","is_pending":"Not Pending","title":"Redundant Connection","memory":"8.9 MB","code":"class Solution {\npublic:\n    int findSet(vector<int> &parent, int v)\n    {\n        if(parent[v] == v)\n            return v;\n        parent[v] = findSet(parent, parent[v]);\n        return parent[v];\n    }\n    \n    void unionSet(vector<int> &parent, vector<int> &sizes, int u, int v)\n    {\n        int x = findSet(parent, u);\n        int y = findSet(parent, v);\n        if(x != y)\n        {\n            if(sizes[x] > sizes[y])\n                swap(x, y);\n            parent[x] = y;\n            sizes[y] += x;\n        }\n    }\n    \n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        int n = edges.size();\n        vector<int> parent(n + 1, 0);\n        vector<int> sizes(n + 1, 1);\n        \n        for(int i = 0; i < n + 1; i++)\n            parent[i] = i;            \n            \n        for(int i = 0; i < edges.size(); i++)\n        {\n            int u = edges[i][0];\n            int v = edges[i][1];\n            int x = findSet(parent, u);\n            int y = findSet(parent, v);\n            if(x == y)\n                return {u, v};\n            else\n                unionSet(parent, sizes, x, y);\n        }\n        \n        return {};\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection"}