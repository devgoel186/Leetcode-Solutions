{"id":678942529,"lang":"cpp","time":"19 hours, 35 minutes","timestamp":1649764398,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/678942529/","is_pending":"Not Pending","title":"Valid Square","memory":"26.8 MB","code":"class Solution {\npublic:\n    double calculateDistance(vector<int> &p1, vector<int> &p2)\n    {\n        return sqrt(pow(p1[0] - p2[0], 2) + pow(p1[1] - p2[1], 2));\n    }\n    \n    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {\n        vector<vector<int>> arr({p1, p2, p3, p4});\n        unordered_set<double> s;\n        \n        for(int i = 0; i < 4; i++)\n        {\n            for(int j = i + 1; j < 4; j++)   \n            {\n                double dist = calculateDistance(arr[i], arr[j]);\n                \n                if(dist == 0)\n                    return false;\n                \n                s.insert(dist);\n            }\n        }\n        \n        return s.size() == 2;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-square"}