{"id":538436392,"lang":"cpp","time":"8Â months","timestamp":1628958464,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/538436392/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root == NULL)\n            return NULL;\n        \n        if(root == p || root == q)\n            return root;\n        \n        TreeNode *l = lowestCommonAncestor(root->left, p, q);\n        TreeNode *r = lowestCommonAncestor(root->right, p, q);\n        \n        if(l != NULL && r != NULL)\n            return root;\n        \n        else if(l != NULL)\n            return l;\n        \n        else if(r != NULL)\n            return r;\n        \n        return NULL;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}